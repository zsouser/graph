#BlueJ class context
comment0.params=id\ g
comment0.target=NodeController(java.lang.String,\ GraphController)
comment0.text=\n\ Constructor\ for\ objects\ of\ class\ NodeController\n\ \n\ @param\ id\ the\ identifier\ for\ this\ vertex\n\ @param\ g\ the\ graph\ this\ vertex\ will\ be\ in\n
comment1.params=v
comment1.target=void\ addEdge(NodeController)
comment1.text=\n\ Add\ an\ edge\ to\ the\ adjacency\ list\n\ \n\ @param\ v\ the\ vertex\ to\ be\ added\n
comment10.params=
comment10.target=void\ processAncestors()
comment10.text=\n\ Process\ the\ ancestor\ functionality\n
comment11.params=
comment11.target=void\ processLate()
comment11.text=\n\ Late\ processing\ function,\ calls\ processArticulation\ and\ processAncestors,\n\ and\ pushes\ this\ to\ the\ sort\ stack\n
comment12.params=
comment12.target=void\ popComponent()
comment12.text=\n\ Pop\ the\ strongly\ connected\ component\ from\ the\ stack,\ and\ process\ the\n\ Strongly\ Connected\ Component\ number\n
comment13.params=
comment13.target=void\ discover()
comment13.text=\n\ Discover\ this\ vertex\n
comment14.params=
comment14.target=boolean\ isDiscovered()
comment14.text=\n\ Determine\ whether\ this\ vertex\ is\ discovered\n\ \n\ @return\ true\ if\ it\ is,\ false\ if\ not\n
comment15.params=p
comment15.target=void\ setParent(NodeController)
comment15.text=\n\ Set\ the\ parent\ to\ the\ vertex\ from\ within\ a\ search\n\ @param\ p\ the\ parent\ vertex\n
comment16.params=
comment16.target=NodeController\ getParent()
comment16.text=\n\ Get\ the\ parent\ for\ this\ vertex\n\ \n\ @return\ the\ parent\ vertex\n
comment17.params=
comment17.target=int\ degree()
comment17.text=\n\ Return\ the\ degree\ of\ the\ vertex\n\ @return\ the\ degree\n
comment18.params=
comment18.target=java.util.ArrayList\ getEdgeList()
comment18.text=\n\ Get\ the\ adjacency\ list\n\ \n\ @return\ the\ ArrayList\ of\ vertices\n
comment19.params=
comment19.target=int\ getDiscoveredTime()
comment19.text=\n\ Access\ the\ time\ at\ which\ this\ vertex\ was\ discovered\n\ \n\ @return\ the\ time\n
comment2.params=v
comment2.target=void\ removeEdge(NodeController)
comment2.text=\n\ Remove\ an\ edge\ from\ the\ adjacency\ list\n\ \n\ @param\ v\ the\ vertex\ to\ be\ removed\n
comment20.params=
comment20.target=java.lang.String\ toString()
comment20.text=\n\ toString\n\ @return\ the\ string\ representation\ of\ the\ vertex\n
comment21.params=
comment21.target=int\ hashCode()
comment21.text=\n\ HashCode\ is\ the\ id\ of\ the\ vertex\n
comment22.params=o
comment22.target=boolean\ equals(java.lang.Object)
comment22.text=\n\ equals\ method\n
comment3.params=target
comment3.target=int\ edgeClass(NodeController)
comment3.text=\n\ Calculates\ the\ edge\ classification\ for\ vertex\ processing\n\ \n\ @param\ target\ the\ vertex\ at\ the\ end\ of\ the\ edge\n\ @return\ int\ the\ classification\ code\ for\ the\ edge\n
comment4.params=target
comment4.target=void\ process(NodeController)
comment4.text=\n\ Process\ the\ edge\ between\ this\ vertex\ and\ the\ target\n\ \n\ @param\ target\ the\ target\ of\ the\ edge\n
comment5.params=
comment5.target=void\ clear()
comment5.text=\n\ Clears\ the\ flags\ for\ this\ vertex\n
comment6.params=
comment6.target=void\ markProcessed()
comment6.text=\n\ Marks\ this\ vertex\ as\ processed\n
comment7.params=
comment7.target=boolean\ isProcessed()
comment7.text=\n\ Check\ whether\ this\ vertex\ is\ processed\n\ \n\ @return\ true\ if\ it\ is\ processed,\ false\ if\ not\n
comment8.params=
comment8.target=void\ processEarly()
comment8.text=\n\ Early\ processing\ function\n
comment9.params=
comment9.target=void\ processArticulation()
comment9.text=\n\ Process\ the\ articulation\ vertex\ functionality\n
numComments=23
