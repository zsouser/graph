#BlueJ class context
comment0.params=
comment0.target=Graph()
comment0.text=\n\ Construct\ an\ undirected\ graph\ with\ no\ nodes\ or\ edges.\n
comment1.params=nodeLabels
comment1.target=Graph(java.util.List)
comment1.text=\n\ Construct\ an\ undirected\ graph\ with\ nodes\ only,\ no\ edges.\n\ Performs\ no\ error\ checking.\n\ @param\ nodeLabels\ a\ list\ of\ String\ objects\ to\ be\ used\ as\ node\ labels\n
comment10.params=graphFileName
comment10.target=void\ restoreGraph(java.lang.String)
comment10.text=\n\ Reload\ this\ graph.\n\ @param\ graphFileName\ the\ name\ of\ the\ file\ with\ serialized\ graph,\n\ \ \ \ \ \ \ \ or\ null\ to\ use\ default\ file\ name.\ \n
comment2.params=
comment2.target=java.util.List\ getNodeNamesAsStrings()
comment2.text=\n\ Retrieve\ nodes\ as\ list\ of\ labels.\n\ @return\ list\ of\ labels\ of\ nodes\ in\ this\ graph\n
comment3.params=
comment3.target=getNodesAsStrings()
comment3.text=\n\ Retrieve\ nodes\ as\ list\ of\ pairs\ of\ Strings.\n\ The\ first\ element\ is\ the\ node\ label,\ the\ second\ is\ the\ associated\ cost.\n\ @return\ list\ of\ labels\ of\ nodes\ in\ this\ graph\n
comment4.params=
comment4.target=getEdgesAsStrings()
comment4.text=\n\ Retrieve\ edges\ as\ list\ of\ lists\ of\ five\ Strings\:\n\ two\ node\ labels,\ an\ indicator\ of\ directedness,\n\ a\ label,\ and\ a\ weight.\n\ If\ a\ directed\ edge,\ the\ first\ of\ the\ pair\ of\ nodes\ represents\n\ the\ start\ node\ while\ the\ second\ represents\ the\ end\ node.\n\ If\ a\ directed\ edge,\ the\ indicator\ is\ "true";\ \n\ otherwise\ the\ indicator\ is\ "false".\n\ If\ the\ edge\ has\ no\ label,\ it\ will\ be\ shown\ as\ "null".\n\ If\ the\ edge\ has\ a\ weight,\ it\ will\ be\ given\ as\ an\ integer\ string;\n\ otherwise\ it\ will\ be\ shown\ as\ "null".\n\ @return\ list\ of\ edges\ in\ this\ graph\n
comment5.params=
comment5.target=java.lang.Boolean\ isDirected()
comment5.text=\n\ Disclose\ if\ graph\ is\ directed\ or\ undirected.\n\ @return\ true\ if\ graph\ is\ directed;\ false\ otherwise\n
comment6.params=
comment6.target=java.lang.String\ toString()
comment6.text=\n\ Simple\ string\ representation\ of\ graph.\n\ @return\ a\ string\ that\ shows\ the\ nodes\ and\ edges\ of\ this\ graph\n
comment7.params=o
comment7.target=boolean\ equals(java.lang.Object)
comment8.params=
comment8.target=int\ hashCode()
comment9.params=graphFileName
comment9.target=void\ saveGraph(java.lang.String)
comment9.text=\n\ Save\ the\ state\ of\ this\ graph.\n\ @param\ graphFileName\ the\ name\ of\ the\ file\ into\ which\ to\ save,\n\ \ \ \ \ \ \ \ or\ null\ to\ use\ default\ file\ name.\ \n
numComments=11
