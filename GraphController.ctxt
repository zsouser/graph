#BlueJ class context
comment0.params=g
comment0.target=GraphController(Graph)
comment0.text=\n\ Constructor\ for\ class\ Graph\n\ \n\ @param\ directed\ flag\ for\ whether\ the\ graph\ is\ directed;\n
comment1.params=directed
comment1.target=GraphController(boolean)
comment10.params=start\ end
comment10.target=java.util.List\ findPath(NodeController,\ NodeController)
comment10.text=\n\ Find\ a\ path\ between\ two\ vertices\n\ \n\ @param\ start\ the\ start\ vertex\n\ @param\ end\ the\ end\ vertex\n\ \n\ @return\ a\ list\ of\ vertices\ that\ form\ a\ path\ from\ beginning\ to\ end\n
comment11.params=start\ end\ list
comment11.target=boolean\ findPath(NodeController,\ NodeController,\ java.util.List)
comment11.text=\n\ Recursive\ helper\ function\ for\ finding\ paths\n\ \n\ @param\ start\ the\ start\ vertex\n\ @param\ end\ the\ end\ vertex\n\ @param\ list\ the\ working\ list\ for\ the\ path\n
comment12.params=
comment12.target=java.util.Stack\ topSort()
comment12.text=\n\ Topological\ sort\n\ \n\ @return\ the\ stack\ formed\ by\ the\ depth\ first\ search\n
comment13.params=
comment13.target=java.util.List\ stronglyConnected()
comment13.text=\n\ Get\ a\ list\ of\ strongly\ connected\ component\ numbers\ for\ each\ vertex\n\ \n\ @return\ the\ list\ of\ SCC\ integers\n
comment14.params=
comment14.target=boolean\ isTree()
comment14.text=\n\ Assess\ whether\ the\ graph\ is\ a\ tree\n\ \n\ @return\ true\ if\ it\ is,\ false\ if\ not\n
comment15.params=
comment15.target=boolean\ isConnected()
comment15.text=\n\ Assess\ whether\ the\ graph\ is\ connected\n\ \n\ @return\ true\ if\ it\ is,\ false\ if\ not\n
comment16.params=
comment16.target=java.util.List\ getArticulationVertices()
comment16.text=\n\ Get\ the\ articulation\ vertices\ stored\ in\ the\ graph\n\ after\ a\ depth\ first\ search\n\ \n\ @return\ the\ List\ of\ articulation\ vertices\n
comment17.params=
comment17.target=java.util.List\ findBridges()
comment17.text=\n\ Find\ the\ bridges\ in\ the\ graph.\ Removes\ an\ edge\ at\ a\ time\n\ and\ checks\ for\ connectivity\n\ \n\ @return\ the\ list\ of\ edges\ that\ are\ bridges\n
comment2.params=v
comment2.target=NodeController\ addVertex(NodeController)
comment2.text=\n\ Add\ a\ vertex\ to\ the\ graph\n\ \n\ @param\ the\ NodeController\ to\ be\ added\n\ @return\ the\ NodeController\ that\ was\ added\n
comment3.params=label
comment3.target=NodeController\ getVertex(java.lang.String)
comment3.text=\ \n\ Retrieve\ a\ vertex\ from\ the\ graph\ based\ on\ its\ name\n
comment4.params=target
comment4.target=void\ deleteVertex(NodeController)
comment4.text=\n\ Delete\ a\ vertex\ from\ the\ graph\n\ \n\ @param\ the\ target\ vertex\ to\ delete\n
comment5.params=e
comment5.target=EdgeController\ addEdge(EdgeController)
comment5.text=\n\ Add\ an\ edge\ to\ the\ graph\n\ \n\ @param\ the\ edge\ to\ be\ added\n\ @return\ the\ edge\ that\ was\ added\n
comment6.params=e
comment6.target=void\ removeEdge(EdgeController)
comment6.text=\n\ Remove\ an\ edge\ from\ the\ graph\n\ \n\ @param\ the\ edge\ to\ be\ removed\n
comment7.params=
comment7.target=void\ clear()
comment7.text=\n\ Clear\ the\ search\n
comment8.params=start
comment8.target=void\ bfs(NodeController)
comment8.text=\n\ Breadth-first\ search\ traverses\ the\ vertices,\ \n\ modifying\ them\ accordingly\ to\ activate\ most\n\ functionality\n\ \n\ @param\ start\ the\ vertex\ to\ initiate\ the\ search\ from\n
comment9.params=start
comment9.target=void\ dfs(NodeController)
comment9.text=\n\ Depth-first\ search\ traverses\ the\ vertices,\n\ modifying\ them\ and\ activating\ most\ functionality\n\ \n\ @param\ start\ the\ NodeController\ to\ initiate\ the\ search\ from\n
numComments=18
